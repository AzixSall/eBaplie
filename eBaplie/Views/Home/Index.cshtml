@model eBaplie.Models.BaplieData

@{
    ViewData["Title"] = "Home Page";
}

@*<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>*@
<div class="row">
    @foreach (var port in ViewBag.PortColor)
    {
        <div style="background-color: @port.Color ; padding: 10px; border: 1px solid green; width: 75px;" class="my-2 mx-2">@port.Name</div>
    }
</div>


<div class="row">
	<div class="col-md-6">
		<div id="scene-container" class="my-4"></div>
	</div>
	<div class="col-md-6">
		
	</div>
</div>

<div class="card">
	<div class="card-header">
		List of Containers
	</div>
	<div class="card-body">
		<table class="table table-stripped">
            <thead>
                <tr>
                    <th>
                        Container ID
                    </th>
                    <th>
                        Position(X,Y,Z)
                    </th>
                    <th>
                        Status
                    </th>
                    <th>
                        VGM
                    </th>
                    <th>
                        Temperature
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Containers) {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.ContainerID)
                        </td>
                        <td>
                            <span>@item.XPos , @item.YPos , @item.ZPos</span>
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Status)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.VGM)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Temperature)
                        </td>
                        <td>
                            @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ })
                        </td>
                    </tr>
                }
            </tbody>
        </table>
	</div>
</div>


@section Scripts{
    <script type="module">
        $('.table').DataTable();
		const scene = new THREE.Scene();
		const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );

		const renderer = new THREE.WebGLRenderer();
		//renderer.setSize( window.innerWidth, window.innerHeight );
		renderer.setSize( 700, 600, true );
		var container = document.getElementById("scene-container");
		container.appendChild( renderer.domElement );

		var data = @Html.Raw(Json.Serialize(@ViewBag.Containers));
		var dataPortColor = @Html.Raw(Json.Serialize(@ViewBag.PortColor));

		console.log(data);
		data.forEach((element) => {
            var material = null;
			const geometry = new THREE.BoxGeometry( 2, 1, 1 );
            dataPortColor.forEach((port) => {
                if (port.name === element.portOfDischarge) {
                    material = new THREE.MeshBasicMaterial({ color: port.color });
                }
            });

			//const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );
			const cube = new THREE.Mesh( geometry, material );

            cube.position.x = element.xPos;
            cube.position.y = element.yPos;
            cube.position.z = element.zPos;

			scene.add( cube );
            
		});

        var grid = new THREE.GridHelper(100, 10);
        scene.add(grid);

        //LIGHTS
        var lights = [];
        lights[0] = new THREE.PointLight(0xfffff, 10, 0);
        lights[1] = new THREE.PointLight(0xffffff, 10, 0);
        lights[2] = new THREE.PointLight(0xffffff, 10, 0);
        lights[0].position.set(0, 500, 0);
        lights[1].position.set(100, 500, 100);
        lights[2].position.set(-100, -500, -100);
        scene.add(lights[0]);
        scene.add(lights[1]);
        scene.add(lights[2]);

		camera.position.z = 50;
		const controls = new THREE.OrbitControls(camera, renderer.domElement);
		function animate() {
			requestAnimationFrame( animate );

			//cube.rotation.x += 0.01;
			//cube.rotation.y += 0.01;
            controls.update();
			renderer.render( scene, camera );
			
		};

		animate();
	</script>
}